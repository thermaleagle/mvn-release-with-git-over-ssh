<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.github.thermaleagle</groupId>
	<artifactId>mvn-release-with-git-over-ssh</artifactId>
	<version>0.0.30-SNAPSHOT</version>
	<name>mvn-release-with-git-over-ssh</name>
	<description>A sample maven project to demonstrate how to use maven release plugin to release over ssh protocol</description>
	<url>https://github.com/thermaleagle/mvn-release-with-git-over-ssh</url>
	<licenses>
		<license />
	</licenses>
	<properties>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
    	<gpg.keyname>thermaleagle@gmail.com</gpg.keyname>
        <!-- Add a property for the Git commit ID -->
        <git.commit.id>unknown</git.commit.id>
		<!-- Add a unique identifier for rebuilds using the timestamp -->
        <rebuild.identifier>${maven.build.timestamp}</rebuild.identifier>
		<!-- Ensure that the timestamp is a number in the specified format - so that each rebuild of the same commit gets a unique version differentiated by the timestamp -->
		<maven.build.timestamp.format>yyyy-MM-dd.HH-mm-ss.SSS</maven.build.timestamp.format>
	</properties>

	<scm>
		<developerConnection>scm:git:git@github.com:thermaleagle/mvn-release-with-git-over-ssh.git</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/thermaleagle/mvn-release-with-git-over-ssh</url>
	</scm>
	<developers>
		<developer>
			<name>Thermal Eagle</name>
			<email>thermaleagle@gmail.com</email>
		</developer>
	</developers>
	<build>
		<plugins>
			<plugin>
				<!-- 
				What this build-helper plugin's "parse-version" mojo will do is give you the following properties that you can use as you see fit:

					parsedVersion.majorVersion
					parsedVersion.minorVersion
					parsedVersion.incrementalVersion
					parsedVersion.qualifier
					parsedVersion.buildNumber
				-->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
				<execution>
					<id>parse-version</id>
					<goals>
					<goal>parse-version</goal>
					</goals>
				</execution>
				</executions>
			</plugin>
            <!-- Maven Git Commit ID Plugin -->
			<!-- target regex: https://regex101.com/r/80ZdrV/1 -->
            <plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<prefix>git</prefix>
					<verbose>false</verbose>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<!-- the git.properties will have many properties generated by this plugin which can be used in mvn goals, for e.g., to add the coommit id to the version tag-->
					<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
					<format>json</format>
					<gitDescribe>
						<skip>false</skip>
						<always>false</always>
						<dirty>-dirty</dirty>
					</gitDescribe>
					<injectAllReactorProjects>true</injectAllReactorProjects>
				</configuration>
            </plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
						<configuration>
						  	<executable>${gpg.executable}</executable>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.6.13</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.4.2</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-gitexe</artifactId>
						<version>1.8.1</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>
</project>
